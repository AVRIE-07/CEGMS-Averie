import React, { useEffect, useState } from "react";
import Sidebar from "../SidebarComponents/Sidebar";
import styles from "./Storage.module.css";
import { Link } from "react-router-dom";
import { Dropdown } from "react-bootstrap";
import axios from "axios";
import { jsPDF } from "jspdf";
import "jspdf-autotable"; // Make sure to import this

const Storage = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedAction, setSelectedAction] = useState("");
  const [stockMovements, setStockMovements] = useState([]);
  const [filteredMovements, setFilteredMovements] = useState([]);
  const [addedCount, setAddedCount] = useState(0);
  const [soldCount, setSoldCount] = useState(0);
  const [returnedCount, setReturnedCount] = useState(0);
  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");
  const [physicalCounts, setPhysicalCounts] = useState({});
  const [discrepancies, setDiscrepancies] = useState({});

  const [user, setUser] = useState({
    firstname: "",
    lastname: "",
    email: "",
    username: "",
  });

  const reconcileCounts = async () => {
    const updatedMovements = stockMovements.map((movement) => {
      const physicalCount =
        physicalCounts[movement.product_ID] || movement.adj_Quantity;
      return {
        ...movement,
        adj_Quantity: physicalCount,
      };
    });

    setStockMovements(updatedMovements);
    setFilteredMovements(updatedMovements);

    try {
      const response = await axios.post(
        "http://localhost:3001/api/stockmovement/reconcile",
        {
          movements: updatedMovements,
        }
      );
      if (response.status === 200) {
        alert("Reconciliation completed and saved to the database!");
        setPhysicalCounts({}); // Reset physical counts input
      } else {
        alert("Failed to save reconciliation data.");
      }
    } catch (error) {
      console.error("Error while saving reconciliation data:", error);
      alert("An error occurred while saving the reconciliation data.");
    }
  };

  const handlePhysicalCountChange = (productId, value) => {
    // Parse the value input, defaulting to 0 if invalid (NaN or empty)
    const updatedCounts = {
      ...physicalCounts,
      [productId]: parseInt(value, 10) || 0,
    };

    setPhysicalCounts(updatedCounts);

    // Update the discrepancies for this product
    const updatedDiscrepancies = { ...discrepancies };
    const movement = stockMovements.find(
      (movement) => movement.product_ID === productId
    );

    if (movement) {
      const systemCount = movement.adj_Quantity; // The system's current count
      const discrepancy = updatedCounts[productId] - systemCount; // Calculate the difference
      updatedDiscrepancies[productId] = discrepancy; // Store the discrepancy for this product
    } else {
      // If no movement found, ensure the discrepancy is set to zero
      updatedDiscrepancies[productId] = 0;
    }

    setDiscrepancies(updatedDiscrepancies);
  };

  useEffect(() => {
    const storedUsername = localStorage.getItem("username");
    const storedFirstname = localStorage.getItem("firstname");
    const storedLastname = localStorage.getItem("lastname");
    const storedEmail = localStorage.getItem("email");
    const userId = localStorage.getItem("userId");

    if (storedUsername && storedFirstname && storedLastname && storedEmail) {
      setUser({
        username: storedUsername,
        firstname: storedFirstname,
        lastname: storedLastname,
        email: storedEmail,
        userId: userId,
      });
    }
  }, []);
  const generateReport = () => {
    if (filteredMovements.length === 0) {
      alert("No movements to generate a report for.");
      return;
    }

    // Create a new jsPDF instance
    const doc = new jsPDF({
      orientation: "landscape", // Landscape orientation
    });

    // Set up title
    doc.setFont("helvetica", "bold");
    doc.setFontSize(16);
    doc.text("Stock Movements Report", 14, 20);

    // Set up user details
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text(`Generated by: ${user.firstname} ${user.lastname}`, 14, 30);
    doc.text(`Email: ${user.email}`, 14, 50);

    // Add a line for separation
    doc.setLineWidth(0.5);
    doc.line(14, 55, 285, 55); // Draw a line across the page

    // Set up table headers and data
    const headers = [
      "Movement ID",
      "Product ID",
      "Product Name",
      "Stock Action",
      "Quantity Moved",
      "Movement Date",
      "Comments",
    ];

    const rows = filteredMovements.map((movement) => [
      movement.movement_ID.toString(),
      movement.product_ID.toString(),
      movement.adj_Description,
      movement.adj_Adjustment_Type,
      movement.adj_Quantity.toString(),
      new Date(movement.adj_Date).toLocaleDateString(),
      movement.adj_Comment || "",
    ]);

    // Set up table options
    doc.autoTable({
      head: [headers], // Table headers
      body: rows, // Data rows
      startY: 60, // Position where table starts
      theme: "grid", // Table style
      headStyles: {
        fillColor: [22, 160, 133], // Header background color
        textColor: [255, 255, 255], // Header text color
      },
      bodyStyles: {
        fontSize: 10, // Adjust body font size
        cellPadding: 2, // Cell padding for better spacing
      },
      margin: { top: 20 }, // Margin top for table
      tableWidth: "auto", // Auto width for columns
    });

    // Save the PDF
    doc.save("stock_movements_report.pdf");
  };
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10); // Number of items per page

  const handleDateChange = (field, value) => {
    if (field === "from") {
      setFromDate(value);
      filterMovements(searchQuery, selectedAction, value, toDate);
    } else if (field === "to") {
      setToDate(value);
      filterMovements(searchQuery, selectedAction, fromDate, value);
    }
  };

  // Fetch stock movements and calculate totals
  const fetchStockMovements = async () => {
    try {
      const response = await axios.get(
        "http://localhost:3001/api/stockMovement"
      );
      let movements = response.data;

      // Sort stock movements by date (most recent first)
      movements = movements.sort(
        (a, b) => new Date(b.adj_Date) - new Date(a.adj_Date)
      );

      // Set state with sorted movements
      setStockMovements(movements);
      setFilteredMovements(movements);

      // Calculate totals
      let added = 0;
      let sold = 0;
      let returned = 0;

      movements.forEach((movement) => {
        switch (movement.adj_Adjustment_Type) {
          case "Added":
            added += 1;
            break;
          case "Sold":
            sold += 1;
            break;
          case "Returned":
            returned += 1;
            break;
          default:
            break;
        }
      });

      // Update state with calculated totals
      setAddedCount(added);
      setSoldCount(sold);
      setReturnedCount(returned);
    } catch (error) {
      console.error("Error fetching stock movements:", error);
    }
  };

  useEffect(() => {
    fetchStockMovements();
  }, []);

  // Handle search input
  const handleSearch = (event) => {
    const value = event.target.value.toLowerCase();
    setSearchQuery(value);
    filterMovements(value, selectedAction);
  };

  // Handle action selection from dropdown
  const handleSelectAction = (action) => {
    setSelectedAction(action);
    filterMovements(searchQuery, action);
  };

  // Filter stock movements based on search query and action
  const filterMovements = (search, action, from, to) => {
    let filtered = stockMovements;

    // Filter based on search query
    filtered = filtered.filter((movement) => {
      const matchesSearch =
        movement.movement_ID.toString().toLowerCase().includes(search) ||
        movement.product_ID.toString().toLowerCase().includes(search) ||
        movement.adj_Description.toLowerCase().includes(search) ||
        movement.adj_Adjustment_Type.toLowerCase().includes(search) ||
        new Date(movement.adj_Date).toLocaleDateString().includes(search);

      return matchesSearch;
    });

    // Filter based on selected action
    if (action) {
      filtered = filtered.filter(
        (movement) => movement.adj_Adjustment_Type === action
      );
    }

    // Filter based on "from" date
    if (from) {
      filtered = filtered.filter(
        (movement) => new Date(movement.adj_Date) >= new Date(from)
      );
    }

    // Filter based on exact "to" date (matches the exact date)
    if (to) {
      filtered = filtered.filter(
        (movement) =>
          new Date(movement.adj_Date).toLocaleDateString() ===
          new Date(to).toLocaleDateString()
      );
    }

    // Update filtered movements
    setFilteredMovements(filtered);
  };

  // Pagination logic
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredMovements.slice(
    indexOfFirstItem,
    indexOfLastItem
  );

  // Pagination controls
  const paginate = (pageNumber) => setCurrentPage(pageNumber);
  const totalPages = Math.ceil(filteredMovements.length / itemsPerPage);

  const getRowColor = (action) => {
    switch (action) {
      case "Added":
        return "table-success";
      case "Sold":
        return "table-danger";
      case "Returned":
        return "table-warning";
      default:
        return "";
    }
  };

  return (
    <div className={styles.dashboard}>
      <Sidebar />
      <main className={styles.mainContent} style={{ width: "100%" }}>
        <div className="d-flex justify-content-start">
          <ul className="nav nav-underline fs-6 me-3">
            <li className="nav-item pe-3">
              <Link
                to="/Storage"
                className="nav-link fw-semibold text-decoration-none"
                style={{ color: "#6a6d71" }}
              >
                Products
              </Link>
            </li>
            <li className="nav-item pe-3">
              <Link
                to="/Storage/StockMovement"
                className="nav-link fw-semibold text-decoration-none border-bottom border-dark border-2"
              >
                Stock Movement
              </Link>
            </li>
            <li className="nav-item"></li>
          </ul>
        </div>

        <div className="card shadow-sm py-3 px-4 mb-3">
          <div className="d-flex justify-content-between align-items-center">
            <div className="d-flex align-items-center">
              <i className="bi bi-bar-chart-fill fs-3"></i>
              <h5 className="fw-semibold ms-3 mb-0">Storage</h5>
            </div>
          </div>
        </div>

        <div
          className="card shadow-sm px-4 py-1"
          style={{ backgroundColor: "#50504D" }}
        >
          <div className="d-flex align-items-center" style={{ height: "68px" }}>
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Search..."
              className="form-control"
              style={{ width: "300px" }}
            />
            <Dropdown className="ms-1" onSelect={handleSelectAction}>
              <Dropdown.Toggle
                style={{
                  backgroundColor: "#343a40", // Dark background for the toggle button
                  color: "#ffffff", // White text color
                  border: "none", // Remove border if needed
                  width: "150px", // Fixed width for the toggle button
                  textOverflow: "ellipsis", // Ensures long text doesn't overflow
                  whiteSpace: "nowrap", // Prevent text wrapping
                  overflow: "hidden", // Prevent overflow of text
                }}
                variant="secondary"
                id="dropdown-basic"
              >
                {selectedAction || "Stock Filter"}
              </Dropdown.Toggle>
              <Dropdown.Menu
                style={{
                  backgroundColor: "#9df1fa", // Background for dropdown items
                  border: "none", // Optional: remove border
                  width: "150px", // Fixed width for the dropdown menu
                }}
              >
                <Dropdown.Item eventKey="">All Actions</Dropdown.Item>
                <Dropdown.Item eventKey="Added">Added</Dropdown.Item>
                <Dropdown.Item eventKey="Sold">Sold</Dropdown.Item>
                <Dropdown.Item eventKey="Returned">Returned</Dropdown.Item>
              </Dropdown.Menu>
            </Dropdown>

            <div className="d-flex align-items-center justify-content-between text-white p-1 rounded">
              <div
                className="me-1 px-4 py-2 bg-success rounded d-flex align-items-center"
                style={{
                  maxWidth: "33%",
                  overflow: "hidden",
                  whiteSpace: "nowrap",
                }}
              >
                <strong
                  style={{
                    fontWeight: "normal",
                    color: "black",
                    whiteSpace: "nowrap",
                  }}
                >
                  <i
                    className="bi bi-box-fill"
                    style={{ marginRight: "10px", marginLeft: "-10px" }}
                  ></i>
                  Added: {addedCount}
                </strong>
              </div>
              <div
                className="me-1 px-4 py-2 bg-danger rounded d-flex align-items-center"
                style={{
                  maxWidth: "33%",
                  overflow: "hidden",
                  whiteSpace: "nowrap",
                }}
              >
                <strong
                  style={{
                    fontWeight: "normal",
                    color: "black",
                    whiteSpace: "nowrap",
                  }}
                >
                  <i
                    className="bi bi-box-fill"
                    style={{ marginRight: "10px", marginLeft: "-10px" }}
                  ></i>
                  Sold: {soldCount}
                </strong>
              </div>
              <div
                className="me-1 px-4 py-2 bg-warning rounded d-flex align-items-center"
                style={{
                  maxWidth: "33%",
                  overflow: "hidden",
                  whiteSpace: "nowrap",
                }}
              >
                <strong
                  style={{
                    fontWeight: "normal",
                    color: "black",
                    whiteSpace: "nowrap",
                  }}
                >
                  <i
                    className="bi bi-box-fill"
                    style={{ marginRight: "10px", marginLeft: "-10px" }}
                  ></i>
                  Returned: {returnedCount}
                </strong>
              </div>

              <div className="d-flex align-items-center">
                <input
                  type="date"
                  value={fromDate}
                  onChange={(e) => handleDateChange("from", e.target.value)}
                  className="form-control me-1"
                  placeholder="From Date"
                />
                <input
                  type="date"
                  value={toDate}
                  onChange={(e) => handleDateChange("to", e.target.value)}
                  className="form-control"
                  placeholder="To Date"
                />
              </div>
              <button
                className="btn btn-primary mb-1"
                onClick={generateReport}
                style={{
                  padding: "0px 10px", // Reduces the button height by adjusting padding
                  marginTop: "5px",
                  marginLeft: "5px", // Adds a top margin
                }}
              >
                Generate Report
              </button>
            </div>
          </div>
        </div>

        <div className="card shadow-sm px-4 py-3">
          <div className="table-responsive">
            <table className="table table-hover border-top">
              <thead className="table-info">
                <tr>
                  <th scope="col" className="fw-semibold">
                    Movement ID
                  </th>
                  <th scope="col" className="fw-semibold">
                    Product ID
                  </th>
                  <th scope="col" className="fw-semibold">
                    Product Name
                  </th>
                  <th scope="col" className="fw-semibold">
                    Stock Action
                  </th>
                  <th scope="col" className="fw-semibold">
                    Quantity Moved
                  </th>
                  <th scope="col" className="fw-semibold">
                    Movement Date
                  </th>
                  <th scope="col" className="fw-semibold">
                    Comments
                  </th>{" "}
                  <th scope="col" className="fw-semibold">
                    Physical Count
                  </th>
                  <th scope="col" className="fw-semibold">
                    Discrepancy
                  </th>
                </tr>
              </thead>

              <tbody className="fs-6 align-middle table-group-divider">
                {currentItems.map((movement) => (
                  <tr
                    key={movement.movement_ID}
                    className={getRowColor(movement.adj_Adjustment_Type)}
                  >
                    <td className="text-dark">{movement.movement_ID}</td>
                    <td className="text-dark">{movement.product_ID}</td>
                    <td className="text-dark">{movement.adj_Description}</td>
                    <td className="text-dark">
                      {movement.adj_Adjustment_Type}
                    </td>
                    <td className="text-dark">{movement.adj_Quantity}</td>
                    <td className="text-dark">
                      {new Date(movement.adj_Date).toLocaleDateString()}
                    </td>
                    <td className="text-dark">{movement.adj_Comment || " "}</td>{" "}
                    <td>
                      <input
                        type="number"
                        className="form-control"
                        value={physicalCounts[movement.product_ID] || ""}
                        onChange={(e) =>
                          handlePhysicalCountChange(
                            movement.product_ID,
                            e.target.value
                          )
                        }
                      />
                    </td>
                    <td
                      className={
                        discrepancies[movement.product_ID] !== 0
                          ? "text-danger"
                          : "text-success"
                      }
                    >
                      {discrepancies[movement.product_ID] || 0}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          <div className="d-flex justify-content-end mt-3">
            <button className="btn btn-warning" onClick={reconcileCounts}>
              Reconcile Counts
            </button>
          </div>

          {/* Pagination Controls */}
          <div className="d-flex justify-content-center mt-3">
            <nav>
              <ul className="pagination">
                <li
                  className={`page-item ${currentPage === 1 ? "disabled" : ""}`}
                >
                  <button
                    className="page-link"
                    onClick={() => paginate(currentPage - 1)}
                  >
                    Previous
                  </button>
                </li>
                {[...Array(totalPages)].map((_, index) => (
                  <li
                    key={index}
                    className={`page-item ${
                      currentPage === index + 1 ? "active" : ""
                    }`}
                  >
                    <button
                      className="page-link"
                      onClick={() => paginate(index + 1)}
                    >
                      {index + 1}
                    </button>
                  </li>
                ))}
                <li
                  className={`page-item ${
                    currentPage === totalPages ? "disabled" : ""
                  }`}
                >
                  <button
                    className="page-link"
                    onClick={() => paginate(currentPage + 1)}
                  >
                    Next
                  </button>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Storage;
